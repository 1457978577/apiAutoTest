"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Wed Aug 12 02:27:00 CST 2020","Wed Aug 12 02:27:00 CST 2020","92","test","test_api","TestApiAuto","","","修改用户状态为2","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:26:59 CST 2020","Wed Aug 12 02:26:59 CST 2020","111","test","test_api","TestApiAuto","","","get请求实现登录","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"failed","Wed Aug 12 02:26:59 CST 2020","Wed Aug 12 02:27:00 CST 2020","97","test","test_api","TestApiAuto","","","get请求查询用户数据列表","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:27:00 CST 2020","Wed Aug 12 02:27:00 CST 2020","187","test","test_api","TestApiAuto","","","添加用户正常接口数据","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:26:59 CST 2020","Wed Aug 12 02:26:59 CST 2020","176","test","test_api","TestApiAuto","","","post请求实现登录","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:26:59 CST 2020","Wed Aug 12 02:26:59 CST 2020","115","test","test_api","TestApiAuto","","","get请求查询用户数据列表","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:27:00 CST 2020","Wed Aug 12 02:27:00 CST 2020","104","test","test_api","TestApiAuto","","","删除用户zy7y","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
"passed","Wed Aug 12 02:27:00 CST 2020","Wed Aug 12 02:27:00 CST 2020","112","test","test_api","TestApiAuto","","","修改用户状态接口","
        :param case_number: 用例编号
        :param case_title: 用例标题
        :param path: 接口路径
        :param is_token: token操作：写入token/读取token/不携带token
        :param method: 请求方式：get/post/put/delete....
        :param parametric_key: 入参关键字：params/data/json
        :param file_var: 接口中接受文件对象的参数名称
        :param file_path: 文件路径，单文件实例：/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py
        多文件实例['/Users/zy7y/PycharmProjects/apiAutoTest/test/__init__.py','/Users/zy7y/PycharmProjects/apiAutoTest/test/test_api.py']

        :param parameters: path参数(携带在url中的参数)依赖处理 users/:id(id携带在url中) 实例:{""case_001"": '$.data.id'}，解析
        从用例编号为case_001的实际结果响应中提取data字典里面的id的内容(假设提取出来是500), 最后请求的路径将是host + users/500

        :param dependent: data数据依赖，该接口需要上一个接口返回的响应中的某个字段及内容：实例{""case_001"",[""$.data.id"",""$.data.username""]}
        解析: 从用例case_001的实际响应结果中提取到data下面的id，与username的值(假设id值为500，username为admin)，那么提取的数据依赖内容将是{""id"":500, ""username"":""admin""}
        纳闷最终请求的data 将是 {""id"":500, ""username"":""admin""} 与本身的data合并后的内容
        :param data: 请求数据
        :param expect:预期结果，最后与config/config.yaml下的response_reg->response提取出来的实际响应内容做对比，实现断言
        :return:
        "
