{"name": "get请求实现登录", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '参数错误', 'status': 400} == {'msg': None, 'status': None}\n  Differing items:\n  {'status': 400} != {'status': None}\n  {'msg': '参数错误'} != {'msg': None}\n  Use -v to get the full diff", "trace": "self = <test.test_api.TestApiAuto object at 0x104e72c90>\ncase_number = 'case_001', case_title = 'get请求实现登录', path = 'login'\nis_token = '', method = 'get', parametric_key = 'params', file_var = ''\nfile_path = '', parameters = '', dependent = ''\ndata = {'password': '', 'username': 'admin'}\nexpect = {'msg': None, 'status': None}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n            data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data, save_response_dict)\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url, ensure_ascii=False, indent=4), \"最终请求地址\", allure.attachment_type.TEXT)\n            res = br.base_requests(method=method, url=base_url + path + parameters_path_url, parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            save_response_dict.save_actual_response(case_key=case_number, case_response=res)\n            allure.attach(json.dumps(save_response_dict.actual_response, ensure_ascii=False, indent=4), \"实际响应字典\", allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    treat_data.token_header['Authorization'] = jsonpath.jsonpath(res, token_reg)[0]\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\", allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': '参数错误', 'status': 400} == {'msg': None, 'status': None}\nE             Differing items:\nE             {'status': 400} != {'status': None}\nE             {'msg': '参数错误'} != {'msg': None}\nE             Use -v to get the full diff\n\ntest_api.py:108: AssertionError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "passed", "attachments": [{"name": "请求头", "source": "c3083410-d44f-4acc-83d8-9161a86c6a5e-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "204d89e6-264b-420d-b383-e83451c69f65-attachment.txt", "type": "text/plain"}], "start": 1603297267828, "stop": 1603297267831}, {"name": "发送请求，取得响应结果的json串", "status": "passed", "attachments": [{"name": "最终请求地址", "source": "765be2c9-219a-42ab-a1c7-693f987af461-attachment.txt", "type": "text/plain"}, {"name": "实际响应", "source": "5c01f62e-32d7-4871-8f62-30cf6332874b-attachment.txt", "type": "text/plain"}], "start": 1603297267831, "stop": 1603297267948}, {"name": "将响应结果的内容写入实际响应字典中", "status": "passed", "attachments": [{"name": "实际响应字典", "source": "b00e724d-1869-47c7-915f-590c08630b48-attachment.txt", "type": "text/plain"}], "start": 1603297267948, "stop": 1603297267949}, {"name": "根据配置文件的提取响应规则提取实际数据", "status": "passed", "attachments": [{"name": "提取用于断言的实际响应部分数据", "source": "95d43c21-c1d2-4b4b-9795-a996d89c482c-attachment.txt", "type": "text/plain"}], "start": 1603297267949, "stop": 1603297267950}, {"name": "处理读取出来的预期结果响应", "status": "passed", "attachments": [{"name": "预期响应", "source": "77d11004-b198-4e82-9b79-94841113c0d1-attachment.txt", "type": "text/plain"}], "start": 1603297267950, "stop": 1603297267950}, {"name": "预期结果与实际响应进行断言操作", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '参数错误', 'status': 400} == {'msg': None, 'status': None}\n  Differing items:\n  {'status': 400} != {'status': None}\n  {'msg': '参数错误'} != {'msg': None}\n  Use -v to get the full diff\n", "trace": "  File \"/Users/zy7y/Desktop/apiAutoTest/test/test_api.py\", line 108, in test_main\n    assert really == expect\n"}, "attachments": [{"name": "测试结果", "source": "c7c0c592-94e2-449a-8331-7366c6bfc477-attachment.txt", "type": "text/plain"}], "start": 1603297267951, "stop": 1603297267952}], "attachments": [{"name": "stderr", "source": "c7423f7d-1613-453a-b43e-6b47921d82ee-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'case_001'"}, {"name": "case_title", "value": "'get请求实现登录'"}, {"name": "path", "value": "'login'"}, {"name": "is_token", "value": "''"}, {"name": "method", "value": "'get'"}, {"name": "parametric_key", "value": "'params'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "parameters", "value": "''"}, {"name": "dependent", "value": "''"}, {"name": "data", "value": "'{\"username\": \"admin\", \"password\": \"\"}'"}, {"name": "expect", "value": "'{\n        \"msg\": None,\n        \"status\": null\n    }'"}], "start": 1603297267827, "stop": 1603297267952, "uuid": "4359714c-9cc4-4e16-bf8e-8e5b5f37a2a6", "historyId": "e842e63ccbe3f1d4eb5ced168a89df11", "testCaseId": "c2b13641bbced8035cf0282bfb1839e4", "fullName": "test.test_api.TestApiAuto#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "bogon"}, {"name": "thread", "value": "1558-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}