{"name": "get请求查询用户数据列表", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '无效to...'status': 400} == {'msg': '获取管理...'status': 200}\n  Differing items:\n  {'status': 400} != {'status': 200}\n  {'msg': '无效token'} != {'msg': '获取管理员列表成功'}\n  Use -v to get the full diff", "trace": "self = <test.test_api.TestApiAuto object at 0x104e8ac90>\ncase_number = 'case_004', case_title = 'get请求查询用户数据列表', path = 'users'\nis_token = '', method = 'get', parametric_key = 'data', file_var = ''\nfile_path = '', parameters = ''\ndependent = '{\"case_002\": [\"$.data.id\"],\"case_001\":[\"$.meta.msg\",\"$.meta.status\"]}'\ndata = {'id': 500, 'msg': '参数错误', 'pagenum': 1, 'pagesize': '12', ...}\nexpect = {'msg': '获取管理员列表成功', 'status': 200}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n            data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data, save_response_dict)\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url, ensure_ascii=False, indent=4), \"最终请求地址\", allure.attachment_type.TEXT)\n            res = br.base_requests(method=method, url=base_url + path + parameters_path_url, parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            save_response_dict.save_actual_response(case_key=case_number, case_response=res)\n            allure.attach(json.dumps(save_response_dict.actual_response, ensure_ascii=False, indent=4), \"实际响应字典\", allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    treat_data.token_header['Authorization'] = jsonpath.jsonpath(res, token_reg)[0]\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\", allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': '无效to...'status': 400} == {'msg': '获取管理...'status': 200}\nE             Differing items:\nE             {'status': 400} != {'status': 200}\nE             {'msg': '无效token'} != {'msg': '获取管理员列表成功'}\nE             Use -v to get the full diff\n\ntest_api.py:108: AssertionError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "passed", "attachments": [{"name": "请求头", "source": "0a806326-f875-41fa-a97f-f8287b260e88-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "2649fe7a-9570-4d13-8b11-2c37526e2193-attachment.txt", "type": "text/plain"}], "start": 1603297268375, "stop": 1603297268377}, {"name": "发送请求，取得响应结果的json串", "status": "passed", "attachments": [{"name": "最终请求地址", "source": "31b1e2f7-4abb-4372-aa2b-5c7aaa192b9a-attachment.txt", "type": "text/plain"}, {"name": "实际响应", "source": "de1621c9-2986-414f-9ee8-d019962a5a39-attachment.txt", "type": "text/plain"}], "start": 1603297268377, "stop": 1603297268434}, {"name": "将响应结果的内容写入实际响应字典中", "status": "passed", "attachments": [{"name": "实际响应字典", "source": "84425a19-0783-41c0-938c-b1241e433ab9-attachment.txt", "type": "text/plain"}], "start": 1603297268434, "stop": 1603297268435}, {"name": "根据配置文件的提取响应规则提取实际数据", "status": "passed", "attachments": [{"name": "提取用于断言的实际响应部分数据", "source": "4d9e47e9-69b5-4212-ac61-1782536d8c85-attachment.txt", "type": "text/plain"}], "start": 1603297268435, "stop": 1603297268435}, {"name": "处理读取出来的预期结果响应", "status": "passed", "attachments": [{"name": "预期响应", "source": "129fee50-1326-482a-bf1a-9b001545f5ee-attachment.txt", "type": "text/plain"}], "start": 1603297268435, "stop": 1603297268436}, {"name": "预期结果与实际响应进行断言操作", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '无效to...'status': 400} == {'msg': '获取管理...'status': 200}\n  Differing items:\n  {'status': 400} != {'status': 200}\n  {'msg': '无效token'} != {'msg': '获取管理员列表成功'}\n  Use -v to get the full diff\n", "trace": "  File \"/Users/zy7y/Desktop/apiAutoTest/test/test_api.py\", line 108, in test_main\n    assert really == expect\n"}, "attachments": [{"name": "测试结果", "source": "41390d59-f095-4985-b4d1-16597a711825-attachment.txt", "type": "text/plain"}], "start": 1603297268436, "stop": 1603297268438}], "attachments": [{"name": "stderr", "source": "593b0365-92a6-4ee2-aad5-5324417f61bf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'case_004'"}, {"name": "case_title", "value": "'get请求查询用户数据列表'"}, {"name": "path", "value": "'users'"}, {"name": "is_token", "value": "''"}, {"name": "method", "value": "'get'"}, {"name": "parametric_key", "value": "'data'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "parameters", "value": "''"}, {"name": "dependent", "value": "'{\"case_002\": [\"$.data.id\"],\"case_001\":[\"$.meta.msg\",\"$.meta.status\"]}'"}, {"name": "data", "value": "'{\"pagenum\": 1, \"pagesize\": \"12\"}'"}, {"name": "expect", "value": "'{\"msg\": \"获取管理员列表成功\", \"status\": 200}'"}], "start": 1603297268374, "stop": 1603297268438, "uuid": "5719d34d-0c8f-4f81-8001-c04697f27b3d", "historyId": "c1a34db81f0d140b3798bf32958935f5", "testCaseId": "96335e5fe8ea1828392a583ee3f03e30", "fullName": "test.test_api.TestApiAuto#test_main[case_004-get请求查询用户数据列表-users--get-data----{\"case_002\": [\"$.data.id\"],\"case_001\":", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "bogon"}, {"name": "thread", "value": "1558-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}